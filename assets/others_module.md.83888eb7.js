import{_ as s,o as a,c as n,a as e}from"./app.1156ccab.js";const g=JSON.parse('{"title":"前端组件设计","description":"","frontmatter":{"title":"前端组件设计"},"headers":[{"level":2,"title":"为何要进行前端组件设计？","slug":"为何要进行前端组件设计","link":"#为何要进行前端组件设计","children":[]},{"level":2,"title":"如何提升组件易用性？","slug":"如何提升组件易用性","link":"#如何提升组件易用性","children":[{"level":3,"title":"合理的组件封装","slug":"合理的组件封装","link":"#合理的组件封装","children":[]},{"level":3,"title":"规范的API编写","slug":"规范的api编写","link":"#规范的api编写","children":[]},{"level":3,"title":"[Slot] 与 [Props] 的选择","slug":"slot-与-props-的选择","link":"#slot-与-props-的选择","children":[]}]},{"level":2,"title":"如何提升组件可扩展性？","slug":"如何提升组件可扩展性","link":"#如何提升组件可扩展性","children":[{"level":3,"title":"将DOM交予用户接管","slug":"将dom交予用户接管","link":"#将dom交予用户接管","children":[]},{"level":3,"title":"设计可扩展的API","slug":"设计可扩展的api","link":"#设计可扩展的api","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"relativePath":"others/module.md"}'),l={name:"others/module.md"},p=e(`<h1 id="前端组件设计-得这样玩" tabindex="-1"><a href="https://mp.weixin.qq.com/s?__biz=MzI3NTM5NDgzOA==&amp;mid=2247511060&amp;idx=1&amp;sn=7ee9993caae2bf5c1be3829e67aaa34e&amp;chksm=eb07946ddc701d7b5b358549ad94327613bca0cb4856ea44e75615ab2307d3260e1b815a2a1a&amp;scene=90&amp;sessionid=1677142237&amp;subscene=236&amp;key=46ff8a959fee0889f3b02449afd64d2a0dc6e97b2c230ad5933e313a0ee3fabbf17cedabf2b29dc078c0383437ccefbe8f6b8df449ffde8c032a1e32997f46c65a83a778667347efba0b835c042e3cfde7d3dbba67d0714fb83844fd3e2d52e3cb47e5fb943abe4f2de9b820a4bb8bece20eadb373ed974dd16cf528efa5f721&amp;ascene=0&amp;uin=NDc5MjEzODgy&amp;devicetype=Windows+10+x64&amp;version=6309001c&amp;lang=zh_CN&amp;countrycode=CN&amp;exportkey=n_ChQIAhIQ1AGGxVsrxBp1Sa33UNdJFxLgAQIE97dBBAEAAAAAAGcCBIzZyK8AAAAOpnltbLcz9gKNyK89dVj0I1YA5D1cbfhd27s07RM9VJikhfPP7%2B4YZzgMNtaF718LK0SXZ60FD12eBIs7inO23JIpLFhz0jdrGW%2FMW%2FIF%2BtTYmPPJfA3FQVyr%2FAkmvj8bIielLrCKkdwCA7HWbX7IqZaMKMlvUsKK8evqSm5VefKf%2BUQOHHpAQDq1f9DMbZZgk%2FwMEgn9TEKc1sa3x8GjoHtBF0umaZIFDwv600Sibu3TqzkIQRG2JEYaaECJ5mS%2BLlRV5KdMbhxU&amp;acctmode=0&amp;pass_ticket=59I%2Fiew2q7JAXrCiidL5yao2eU7or%2B8GW%2Fko5lwzUrTPxGN41z9xclnjdiF6Mo2EPJMMK%2FWWL1VYoMJxilFnKA%3D%3D&amp;wx_header=1&amp;fontgear=2" target="_blank" rel="noreferrer">前端组件设计，得这样玩！</a> <a class="header-anchor" href="#前端组件设计-得这样玩" aria-hidden="true">#</a></h1><h2 id="为何要进行前端组件设计" tabindex="-1"><strong>为何要进行前端组件设计？</strong> <a class="header-anchor" href="#为何要进行前端组件设计" aria-hidden="true">#</a></h2><blockquote><p>“组件是对数据和方法的简单封装，是软件中具有相对独立功能、接口由契约指定、和语境有明显依赖关系、可独立部署、可组装的软件实体。”</p><p>这段百科中摘取的组件定义，揭示了组件所需要具备的特性：功能独立、约定一致、可集成、服务于场景。</p></blockquote><h2 id="如何提升组件易用性" tabindex="-1"><strong>如何提升组件易用性？</strong> <a class="header-anchor" href="#如何提升组件易用性" aria-hidden="true">#</a></h2><h3 id="合理的组件封装" tabindex="-1">合理的组件封装 <a class="header-anchor" href="#合理的组件封装" aria-hidden="true">#</a></h3><p>前端组件按类型可以分为容器组件、功能组件和展示组件，一个优秀的组件应该保证：功能内聚、样式统一、并且与父元素仅通过Props通信。</p><ol><li><p><strong>当该组件需要承载具体的额外功能时，相较于新增</strong> <strong>API</strong> <strong>，封装成独立的组件是更好的选择。</strong></p></li><li><p><strong>当组件中存在可能被单独使用、可以承载独立功能的子组件时，可以将其以内部组件的形式提供。</strong></p></li></ol><h3 id="规范的api编写" tabindex="-1">规范的API编写 <a class="header-anchor" href="#规范的api编写" aria-hidden="true">#</a></h3><p>一个易用的组件，使用者无需阅读文档或仅快速浏览文档即可上手使用，并且应当在使用过程中给予清晰的注释和代码提示。希望以下API编写建议能够给组件开发者一些参考：</p><ol><li><p>减少必填的API项，尽可能多地提供默认值，降低组件的使用成本；</p></li><li><p>使用通用且有意义的API命名：</p></li><li><ol><li>onXXX：命名监听/触发方法</li><li>renderXXX：命名渲染方法</li><li>beforeXXX/afterXXX：命名前置/后置动作</li><li>xxxProps：命名子组件属性</li><li>优先使用常见单词进行命名，如：value、visible、size、disabled、label、type等等</li></ol></li><li><p>单独维护类型文件，并将其打包至组件产物包中，这样使用者在开发过程中能够实时看到对应的类型提示；</p></li><li><p>在类型文件中，为API编写注释；</p></li></ol><h3 id="slot-与-props-的选择" tabindex="-1">[Slot] 与 [Props] 的选择 <a class="header-anchor" href="#slot-与-props-的选择" aria-hidden="true">#</a></h3><p><strong>使用Props存在的问题？</strong></p><p>当我们需要实现一个较为复杂的卡片需求组件时，为了最大程度地还原UI、减少用户的样式开发成本，首次设计时我们会设计出这样的API：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">export type CardProps = {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 底部信息展示</span></span>
<span class="line"><span style="color:#A6ACCD;">  infoProps?: {</span></span>
<span class="line"><span style="color:#A6ACCD;">     title?: ReactNode;</span></span>
<span class="line"><span style="color:#A6ACCD;">     content?: ReactNode;</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 弹层信息展示</span></span>
<span class="line"><span style="color:#A6ACCD;">  moreInfoProps?: {</span></span>
<span class="line"><span style="color:#A6ACCD;">     info?: ReactNode;</span></span>
<span class="line"><span style="color:#A6ACCD;">     triggerProps?: TriggerProps;</span></span>
<span class="line"><span style="color:#A6ACCD;">     descriptionsProps?: DescriptionsProps;</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;">  className?: string;</span></span>
<span class="line"><span style="color:#A6ACCD;">  style?: CSSStyleSheet;</span></span>
<span class="line"><span style="color:#A6ACCD;">  width?: number | string;</span></span>
<span class="line"><span style="color:#A6ACCD;">  imageProps?: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    srcList?: Array&lt;SrcList&gt;; // 图片url数组</span></span>
<span class="line"><span style="color:#A6ACCD;">    afterImgs?: React.ReactNode; // 插槽，在图片dom节点中</span></span>
<span class="line"><span style="color:#A6ACCD;">    aspectRatio?: string; // 宽高比  默认3:4</span></span>
<span class="line"><span style="color:#A6ACCD;">    buttonProps?: ButtonProps;</span></span>
<span class="line"><span style="color:#A6ACCD;">    current?: number; // 受控展示图</span></span>
<span class="line"><span style="color:#A6ACCD;">    defaultCurrent?: number; // 默认展示图</span></span>
<span class="line"><span style="color:#A6ACCD;">    onChangeCurrent?: (current: number) =&gt; undefined; // 设置current</span></span>
<span class="line"><span style="color:#A6ACCD;">    PreviewGroupProps?: ImagePreviewGroupProps;</span></span>
<span class="line"><span style="color:#A6ACCD;">    src?: string;</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;">  children?: React.ReactNode;</span></span>
<span class="line"><span style="color:#A6ACCD;">} &amp; CardCheckboxProps;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>可以看到，这个业务卡片组件是由多个不同组件组合而成，其承载了渲染和操作（选中操作、图片切换和弹层操作），这个设计的缺陷是显而易见的：</p><ol><li>需要编写很多分散的JSX代码，无论是写在Props中还是定义成单独的组件，其可读性都不高；</li><li>需要在Card组件中杂糅许多额外的Props，例如triggerProps和descriptionsProps，增加了该组件的学习成本；</li></ol><p>如果以插槽的方式对Card组件进行改造，通过内部组件间的组合来实现需求，避免了大量组件Props的堆砌，层次清晰、可读性高，这样的组件结构明显易用性更高。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;Card type=&quot;verticle&quot; {...cardProps}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;CardImage {...ImageProps} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;CardContent {...InfoProps} &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;div className=&quot;card-title&quot;&gt;title&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;div className=&quot;card-content&quot;&gt;content&lt;/div&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;Tag&gt;Tag&lt;/Tag&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/CardContent&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;CardTrigger {...triggerProps}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;Description {...descriptionProps}/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/CardTrigger&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/Card&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>Slot(内部组件)的使用时机？</strong></p><ul><li>布局类组件优先使用Slot，为开发者提供更灵活的使用方式，参考Typography、Layout、Card等组件，开发者可以随意地在这些组件内部插入自定义实现。上文提到的业务卡片组件，实质上也是一个封装了多图预览功能的布局组件，因此更适合使用Slot来组织代码。</li><li>内容复杂、定制化程度高的组件更适合使用Slot</li><li>功能类组件中，以Props传递ReactNode的方式来接管内部元素，尽量避免传递基础类型元素进行展示。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// ❌ 扩展性低</span></span>
<span class="line"><span style="color:#A6ACCD;">type CardProps {</span></span>
<span class="line"><span style="color:#A6ACCD;">    title?: string;</span></span>
<span class="line"><span style="color:#A6ACCD;">    tags?: string[];</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// ✅ 为开发者提供对应的“插槽”</span></span>
<span class="line"><span style="color:#A6ACCD;">type CardProps {</span></span>
<span class="line"><span style="color:#A6ACCD;">    title?: string | ReactNode;</span></span>
<span class="line"><span style="color:#A6ACCD;">    tag?: string[] | ReactNode;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="如何提升组件可扩展性" tabindex="-1">如何提升组件可扩展性？ <a class="header-anchor" href="#如何提升组件可扩展性" aria-hidden="true">#</a></h2><p>开闭原则：对扩展开放，模块的行为可以被扩展；对修改关闭，模块中的源代码不应该被修改</p><h3 id="将dom交予用户接管" tabindex="-1">将DOM交予用户接管 <a class="header-anchor" href="#将dom交予用户接管" aria-hidden="true">#</a></h3><p>在前端组件中，应该提供对应的API属性或方法来支持额外的功能，给予开发者更充分的扩展空间，而不是有部分需求无法满足时放弃使用组件。</p><img src="http://cdn.chen-zeqi.cn/image-20230223195332247.png" alt="image-20230223195332247" style="zoom:50%;"><img src="http://cdn.chen-zeqi.cn/image-20230223195344880.png" alt="image-20230223195344880" style="zoom:50%;"><h3 id="设计可扩展的api" tabindex="-1">设计可扩展的API <a class="header-anchor" href="#设计可扩展的api" aria-hidden="true">#</a></h3><p>组件开发前，整理组件所需实现的功能，并以功能为维度设计组件API。</p><p>例：地区选择器、级联选择器（以功能划分）</p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-hidden="true">#</a></h2><p><a href="https://arco.design/react/docs/start" target="_blank" rel="noreferrer">https://arco.design/react/docs/start</a></p><p><a href="https://juejin.cn/post/7160223720236122125" target="_blank" rel="noreferrer">https://juejin.cn/post/7160223720236122125</a></p><p><a href="https://juejin.cn/post/6844904032700481550" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904032700481550</a></p>`,34),t=[p];function r(o,i,c,d,A,C){return a(),n("div",null,t)}const y=s(l,[["render",r]]);export{g as __pageData,y as default};
